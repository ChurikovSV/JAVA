// –ó–∞–¥–∞–Ω–∏–µ ‚Ññ0
// üìå 1) –ó–∞–º–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤ ArrayList –¥–æ–±–∞–≤—è—Ç—Å—è 10000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
// üìå 2) –ó–∞–º–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤ LinkedList –¥–æ–±–∞–≤—è—Ç—Å—è 10000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
// –°—Ä–∞–≤–Ω–∏—Ç–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º.

package Lesson_04;

import java.util.ArrayList;
import java.util.LinkedList;

public class LS4Task_01 {
    public static void main(String[] args) {
        int count = 100_000;

        System.out.println("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω–µ—Ü ");
        long start = System.currentTimeMillis();
        addEl(count);
        System.out.println("addEl " + (System.currentTimeMillis() - start));

        start = System.currentTimeMillis();
        addElLin(count);
        System.out.println("addElLin " + (System.currentTimeMillis() - start));

        start = System.currentTimeMillis();
        addElMidl(count);
        System.out.println("addElMidl " + (System.currentTimeMillis() - start));

        start = System.currentTimeMillis();
        addElLinMidl(count);
        System.out.println("addElLinMidl " + (System.currentTimeMillis() - start));

    }

    public static ArrayList<Integer> addEl(int count) {
        ArrayList<Integer> arrayList = new ArrayList<>();
        for (int i = 0; i < count; i++) {
            arrayList.addLast(i);
        }
        return arrayList;
    }

    public static LinkedList<Integer> addElLin(int count) {
        LinkedList<Integer> arrayLinkedList = new LinkedList<>();
        for (int i = 0; i < count; i++) {
            arrayLinkedList.addFirst(i);
        }
        return arrayLinkedList;
    }

    public static ArrayList<Integer> addElMidl(int count) {
        ArrayList<Integer> arrayList = new ArrayList<>();
        for (int i = 0; i < count; i++) {
            arrayList.add(arrayList.size() / 2, i);
        }
        return arrayList;
    }

    public static LinkedList<Integer> addElLinMidl(int count) {
        LinkedList<Integer> arrayLinkedList = new LinkedList<>();
        for (int i = 0; i < count; i++) {
            arrayLinkedList.add(arrayLinkedList.size() / 2, i);
        }
        return arrayLinkedList;
    }

}
